---
Parameters:
  AdminIp:
    Type: String
    Default: 0.0.0.0/0
  AmiId:
    Description: AWS Linux 2 AMI ID
    Type: AWS::EC2::Image::Id
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Description: Subnet ID with public IP addressing
    Type: AWS::EC2::Subnet::Id
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName

Resources:
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiId
      KeyName: !Ref KeyPair
      SubnetId: !Ref SubnetId
      InstanceType: t2.medium
      SecurityGroupIds:
        - !Ref Ec2InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          wget https://raw.githubusercontent.com/OzNetNerd/Packer-Gitlab/master/Packer/config/docker-setup.sh
          sed -e s/"sudo "//g -i docker-setup.sh
          chmod +x docker-setup.sh
          ./docker-setup.sh
          rm docker-setup.sh
          wget https://raw.githubusercontent.com/OzNetNerd/Packer-Gitlab/master/Packer/config/gitlab-setup.sh
          sed -e s/"sudo "//g -i gitlab-setup.sh
          chmod +x gitlab-setup.sh
          ./gitlab-setup.sh
          rm gitlab-setup.sh
      Tags:
        - Key: Name
          Value: GitLab

  Ec2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access to the GitLab machine
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref AdminIp
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref AdminIp
      - IpProtocol: tcp
        FromPort: 5000
        ToPort: 5001
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

Outputs:
  Ec2InstanceHostname:
    Value: !GetAtt Ec2Instance.PublicDnsName
    Export:
      Name: !Sub "${AWS::StackName}-smartcheck-jumphost"